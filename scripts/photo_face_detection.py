import os
import cv2
from ultralytics import YOLO

############################################################################################################
#                                    FACE DETECTION
############################################################################################################

def delorean_photo_face_detection(photo):
    """
    D√©tecte un visage dans une image √† l'aide du mod√®le YOLOv8 pr√©-entra√Æn√© (ultralytics).

    Param√®tre :
        photo (np.ndarray) : Image d√©j√† charg√©e (via OpenCV, format NumPy array, en BGR ou RGB).

    Retour :
        np.ndarray | None : Image du visage d√©tect√© (crop), ou None si aucun visage d√©tect√©.

    Remarques :
        - Utilise le mod√®le YOLOv8n personnalis√© pour la d√©tection faciale (yolov8n-face.pt).
        - Ne d√©tecte qu'un seul visage (le premier trouv√©).
    """
    if photo is None:
        print("‚ùå Erreur : aucune image charg√©e.")
        return None

    print("üîπ D√©tection du visage en cours...")

    # Chargement du mod√®le YOLO pour les visages
    yolo_model = YOLO("models/yolov8n-face.pt")
    results = yolo_model(photo)

    # Extraction de la premi√®re bounding box d√©tect√©e
    for result in results:
        for box in result.boxes.xyxy:
            x1, y1, x2, y2 = map(int, box[:4])
            face_crop = photo[y1:y2, x1:x2]
            if face_crop.size == 0:
                print("‚ùå Visage d√©tect√© mais zone vide.")
                return None
            print("‚úÖ Visage d√©tect√©. D√©marrage de la Delorean.")
            return face_crop

    print("‚ùå Aucun visage d√©tect√©.")
    return None
